- @main_class = 'corkboard'

= render :partial => 'notifications'
- unless @past_due.empty? 
  .error
    %p 
      You have past due assignments and that's just no good. Click here to view them &rarr; 
      = link_to 'past due assignments.', assignments_path

#upcoming_filters
  %ul#assignee_filters
    %li.left.active= t '.my_assignments'
    %li.right= t '.everyones_assignments'
  %ul#assignment_filters
    %li.left.active= t '.all'
    %li#task_filter= t '.tasks'
    %li.right#expense_filter= t '.expenses'

#upcoming.content
  = render :partial => "upcoming", :locals => { :day => Date.today, :assignments => @todays_assignments }
  = render :partial => "upcoming", :locals => { :day => Date.tomorrow, :assignments => @tomorrows_assignments }
  = render :partial => "upcoming", :locals => { :day => Date.today + 2, :assignments => @next_days_assignments }

.header_bar.upcoming.current
  %h1= t '.these_coming_days'
  %p
    =link_to t('.upcoming'), '#', :class => 'active', :"data-name" => 'upcoming'
    |
    =link_to 'monthly', '/corkboard/monthly'
.header_bar
  %h1= t '.this_coming_month'
  %p
    =link_to 'upcoming', '/corkboard/upcoming'
    |
    =link_to 'monthly', '/corkboard/monthly', :class => 'active'

#centric.content
  - # what weekday number is today? (Sun = 0, Mon = 1)?
  - weekday_number = Date.today.wday()
  - # how many days do we show after today
  - number_of_days = 13
  - (0..number_of_days).map do |i|
    - date = Date.today + i.days
    - current_day = (date == Date.today) ? 'current_day' : nil
    .day{:class => current_day}
      %p.day_name= l(date, :format => :short_day)
      %p.day_number= date.day
      - unless Assignment.where(:due_date => date.to_s).count <= 0
        #todo
          - tasks = Assignment.where(due_date: date.to_s).and(type: "task")
          - expenses = Assignment.where(due_date: date.to_s).and(type: "expense")
          - unless tasks.count == 0
            =link_to tasks.count, '#', :class => "tasks"
          - unless expenses.count == 0
            =link_to expenses.count, '#', :class => "expenses"
          -# =link_to '2', '#', :class => "expenses tooltip", :title => "Yaaaaaaoooo"

#calendar.content
  - # what weekday number is today? (Sun = 0, Mon = 1)?
  - weekday_number = Date.today.wday()
  - # how many days do we show
  - days = 34
  - # how many days are we showing after today?
  - number_of_days = (weekday_number == 0) ? days : days - weekday_number
  - # if the number of days after today are not
  - # equal to the total number of days shown
  - if number_of_days != days
    - (0..weekday_number).map do |i|
      - date = Date.today - weekday_number + i.days 
      - unless date == Date.today
        .day.past
          %p.day_name= l(date, :format => :short_day)
          %p.day_number= date.day
          - unless Assignment.where(:due_date => date.to_s).count == 0
            #todo
              - tasks = Assignment.where(due_date: date.to_s).and(type: "task")
              - expenses = Assignment.where(due_date: date.to_s).and(type: "expense")
              - unless tasks.count == 0
                =link_to tasks.count, '#', :class => "tasks"
              - unless expenses.count == 0
                =link_to expenses.count, '#', :class => "expenses"
              -# =link_to '0', '#', :class => "expenses" 

  - (0..number_of_days).map do |i|
    - date = Date.today + i.days
    - current_day = (date == Date.today) ? 'current_day' : nil
    - if date.wday != 0 && date.cweek == Date.today.cweek
      - current_week = 'current_week'
    .day{ :class => "#{current_day} #{current_week}" }
      %p.day_name= l(date, :format => :short_day)
      %p.day_number= date.day
      - unless Assignment.where(:due_date => date.to_s).count <= 0
        #todo
          =link_to Assignment.where(:due_date => date.to_s).count, '#', :class => "tasks"
          -# =link_to '2', '#', :class => "expenses"
