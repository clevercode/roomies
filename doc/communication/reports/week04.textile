h1. Weekly Report #4

h2. Development

After initial proofs of concept and implementation testing during the past two weeks in paralell with our Structure & Design phase we spent most of this last week turning the comps we presented to you last week into a click-through protosite. We then proceeded with implemented basic core features into this protosite based on the back-end progress.

h3. Back-end

h4. Assignment creation logic

The intricate data flow detailled during our structure phase was useful in softening the difficult step of implementing assignment trait inheritance in the Rails application itself.

After switching to a more appropriate system of composition with assignment traits (schedulable, payable, etc) and limited inheritance (for very similar types of assignements like Expenses & Bills) we needed to create logic inside our basic Assignment model that would determine what type of assignment to create directly based on user input.

We intentionally start developing user-friendly forms of data entry right into the application's backbone. In the mindset of not passing complexity to the user, we refuse to ask them to decide what type of assignment they are creating before they are even finished with creating one.

As an example, I could start creating a one-time expense only to realize that this will be repeating regularly in the future and would therefore be better suited as a Bill. If we had taken a different approach, we could have asked the user to switch contexts in order to create a Bill instead of an expense. But this would have been solving our problems, not the user's.

Instead, with our current system that Olivier spent a large part of the week refining with Andrew's guidance (it required somewhat non-standard elements), we are checking the information we receive from a single assignment creation form (for all types of assignments) and letting the assignment model's factory decide on its own whether it should create an instance of an Expense or a Task. 

If no due date is given by the user, the factory assumes that the user is creating one of the special "non-assignments" like Bounties, Freebies, Wishes and Gifts. If the user checks this assignment as already completed, we narrow down the possibilities to Gifts and Freebies. And finally if there's a cost associated, we can safely guess it's a Gift.

All this internal logic is roughly functioning (automated tests are being written at the moment to ensure that it stays that way) at the moment for assignment creation. Assignment edition will provide some more challenges internally since but should soon allow users to alter any assignment recently created and automatically switch its type if an error was made during creation.

h4. Support requests

Zachary built the support request functionality, messages sent from the support page are now received by our team directly.

h3. Front-end

On the visual side, Zach has spent the week integrating all comps delivered last week into the protosite with near-final styles. He started creating more complex interaction with JavaScript & Ruby in the views.

h4. Calendar & Present-centric calendar

Following the feedback we received during the design phase we altered the design of the present-centric calendar in order to avoid confusion with traditional calendars. 

We kept the traditional calendar in the protosite for future A/B testing against our more innovative approach. It might prove useful if users dislike the unusual approach.

A new one-line version of the present-centric calendar was produced on the protosite. It shows 14 days after today (the first day on the left) and allows for a really quick glance at the activity ahead. The fact that it doesn't mimic the traditional rectangular calendar will likely improve its usability since it doesn't try to break habituation.

Zach populated the traditional calendar dynamically using Ruby and CSS, for now each row represents a week and the first row is always the current week. As days pass during the week they become greyed out on the first row. This weekly calendar, along with the present-centric one, will soon implement a different styling to denote which day is today, to make it more visually obvious.

We do not plan to have both of these calendars visible simultaneously since they duplicate much of the same data. A decision will be made on which is more apt based on user testing, and if we notice a even split between users, an option will be offered to toggle between both views.

h4. Registration & Connection

We completed most of the registration logic with direct account creation (requiring email and password for now, automatically generated password soon).

Account creation via Twitter & Facebook has been tested successfully during a technology preview but needs to be refactored in order to function with the new functionality we added to the registration.

h4. House creation & Roomie invitation

After registration new users can now create a house, name it and invite roommates using their email addresses (although this functionality is disabled at the moment).

Users can see the roomies listed in their house and kick one out (we may add further checks to ensure this isn't done accidentally), they can also leave their house and create a new one. Which will come in handy in case roommates go their separate ways.

h4. Special "non-assignments"

For all users, the most prominent page of the site is the Corkboard. That's where we show them what assignments are coming up in the next few days so that they can stay on top of everything and receive achievements. 

But we realized early that some "assignments" would have neither assignees nor due dates. These special assignments we decided to place at the top of the corkboard (when they are not completed or waiting for confirmation) since they represent some of the best behavior we would like to encourage.

Those special assignments are: bounties, freebies, gifts and wishes.
We didn't include wishes in our design comps originally but Zachary realized that adding them as a fourth block would help differentiate this "special assignment" grouping with the tasks & expenses below.

We still have to account for the likelihood that few of these special assignments might be visible together. In this case we will simply display a block for each of the special assignment types that have an active assignment. Splitting the grid in up to four columns.

h2. Technology

* Ruby on Rails: As described in the back-end portion of this report, we spent a good part of the week learning how to use model factories in Rails in order to power the assignment creation logic. We also swapped out the form system we were using previously ("formtastic":https://github.com/justinfrench/formtastic) for "simple_form":https://github.com/plataformatec/simple_form a much simpler alternative that produces lighter markup for forms with or without a one-to-one mapping to a specific model's data (we are using one form for 8 different models of assignments). Our decision to use "CoffeeScript":http://jashkenas.github.com/coffee-script/ over raw JavaScript was validated by the annoucement that Rails 3.1 will ship with it as a default before the end of May.

* Haml, Sass & Compass: Because of the heavy integration work Zachary was doing all week we produced a good amount of styles written in "Sass":http://sass-lang.com (CSS). Chris Eppstein, the lead developer of the Sass and "Compass":http://beta.compass-style.org/ (similar to what jQuery is to JavaScript) projects, recommended during a Twitter exchange that we switch to the beta version of Compass. This involved quite a bit of refactoring in the styles (with the benefit of a cross-browser CSS3 in single line properties). It was also announced the new "edge" version of Sass we are now using would also ship with Rails 3.1.

h2. Contacts

h3. Andrew Smith

As usual Zachary and I have been consulting with Andrew for early implementation help since he his aware of many good design patterns made easier by Ruby and Rails. His help was especially welcome while implementing our data model into a factory pattern.

h3. Chris Eppstein

As I mentioned in our Technology section, Chris was very helpful as well and offered great solutions to our problems setting up Sass & Compass efficiently. He also requested to be kicked in the nethers if the new version of Compass isn't released by the end of our launch date. I "assured him":http://link.olivierlacan.com/65sW I would oblige.

h3. The lovely MindComet delegation

We had a great time presenting our design comps to the guys from MindComet this week, a lot of their feedback validated what we had heard previously from Michael Smotherman and Chris Burke regarding the Corkboard design. They also gave us good ideas on how to improve the Profile page in near future.

h2. Budget update

We have completed our third phase, User Experience & Branding. The current invoice now reaches $8,150 and will be due in 7 working days.

* *Discovery* – 36 hours ($1,440) as estimated
* *Information Architecture & Wireframing* – 68 hours & 45 minutes ($3,795) instead of 84 hours ($4,620) estimated
* *User Experience & Branding* – 53 hours ($2,915) instead of 60 hours ($3,300) estimated

Currently unbilled hours include:
* *Project Management* – 19 hours ($1,045)
* *Testing* – 2 hour & 30 minutes ($165)
* *Integration* – 26 hours ($1,430)
* *Development* – 10 hours ($550)

h2. Upcoming work

# Now that we have broken into a large portion of the integration phase in parallel with development, we will keep these two phases intertwined by writing tests for a new feature, adding the feature until tests are all positive and integrating the feature to the pre-alpha site in a more proper test-driven development fashion.

# The corkboard styles have been almost entirely transitioned to the Compass framework and Blueprint grid system, this week we will convert all existing styles (profile, home page, support page & assignment creation popover) to Compass and finish harmonizing them.

# Now that assignment creation is partly functional, new tests need to be written for all possible assignment types. Once creation is solid, we will need to adapt the factory pattern to assignment edition with unit tests first and implementation next.

# We expect to have Alpha released by the end of Spring break, with a possible preview much earlier than that. We will keep you posted.

